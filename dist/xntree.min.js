/******/ (function() { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/css-loader/dist/cjs.js!./src/colorTheme.css":
/*!******************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./src/colorTheme.css ***!
  \******************************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../node_modules/css-loader/dist/runtime/cssWithMappingToString.js */ "./node_modules/css-loader/dist/runtime/cssWithMappingToString.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, ":root{\r\n    --xntree-primary-color:#2459E0;\r\n    --xntree-searched-color:#0bb56e;\r\n    --xntree-moving-color:#f1fa8c;\r\n    --xntree-hover-color:#E9EBF2;\r\n    --xntree-on-color:#6E8EE0;\r\n}\r\n", "",{"version":3,"sources":["webpack://./src/colorTheme.css"],"names":[],"mappings":"AAAA;IACI,8BAA8B;IAC9B,+BAA+B;IAC/B,6BAA6B;IAC7B,4BAA4B;IAC5B,yBAAyB;AAC7B","sourcesContent":[":root{\r\n    --xntree-primary-color:#2459E0;\r\n    --xntree-searched-color:#0bb56e;\r\n    --xntree-moving-color:#f1fa8c;\r\n    --xntree-hover-color:#E9EBF2;\r\n    --xntree-on-color:#6E8EE0;\r\n}\r\n"],"sourceRoot":""}]);
// Exports
/* harmony default export */ __webpack_exports__["default"] = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./src/iconfont/iconfont.css":
/*!*************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./src/iconfont/iconfont.css ***!
  \*************************************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js */ "./node_modules/css-loader/dist/runtime/cssWithMappingToString.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/getUrl.js */ "./node_modules/css-loader/dist/runtime/getUrl.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _iconfont_woff2_t_1625630084053__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./iconfont.woff2?t=1625630084053 */ "./src/iconfont/iconfont.woff2?t=1625630084053");
/* harmony import */ var _iconfont_woff_t_1625630084053__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./iconfont.woff?t=1625630084053 */ "./src/iconfont/iconfont.woff?t=1625630084053");
/* harmony import */ var _iconfont_ttf_t_1625630084053__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./iconfont.ttf?t=1625630084053 */ "./src/iconfont/iconfont.ttf?t=1625630084053");
// Imports






var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0___default()));
var ___CSS_LOADER_URL_REPLACEMENT_0___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(_iconfont_woff2_t_1625630084053__WEBPACK_IMPORTED_MODULE_3__.default);
var ___CSS_LOADER_URL_REPLACEMENT_1___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(_iconfont_woff_t_1625630084053__WEBPACK_IMPORTED_MODULE_4__.default);
var ___CSS_LOADER_URL_REPLACEMENT_2___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(_iconfont_ttf_t_1625630084053__WEBPACK_IMPORTED_MODULE_5__.default);
// Module
___CSS_LOADER_EXPORT___.push([module.id, "@font-face {\n  font-family: \"iconfontxntree\"; /* Project id 2644529 */\n  src: url(" + ___CSS_LOADER_URL_REPLACEMENT_0___ + ") format('woff2'),\n       url(" + ___CSS_LOADER_URL_REPLACEMENT_1___ + ") format('woff'),\n       url(" + ___CSS_LOADER_URL_REPLACEMENT_2___ + ") format('truetype');\n}\n\n.iconfontxntree {\n  font-family: \"iconfontxntree\" !important;\n  font-size: 16px;\n  font-style: normal;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n.icon-xntreecheckboxtick:before {\n  content: \"\\e64b\";\n}\n\n.icon-xntreefile:before {\n  content: \"\\ea28\";\n}\n\n.icon-xntreezhankai1:before {\n  content: \"\\e66d\";\n}\n\n.icon-xntreewenjianjia:before {\n  content: \"\\e625\";\n}\n\n", "",{"version":3,"sources":["webpack://./src/iconfont/iconfont.css"],"names":[],"mappings":"AAAA;EACE,6BAA6B,EAAE,uBAAuB;EACtD;;iEAE2D;AAC7D;;AAEA;EACE,wCAAwC;EACxC,eAAe;EACf,kBAAkB;EAClB,mCAAmC;EACnC,kCAAkC;AACpC;;AAEA;EACE,gBAAgB;AAClB;;AAEA;EACE,gBAAgB;AAClB;;AAEA;EACE,gBAAgB;AAClB;;AAEA;EACE,gBAAgB;AAClB","sourcesContent":["@font-face {\n  font-family: \"iconfontxntree\"; /* Project id 2644529 */\n  src: url('iconfont.woff2?t=1625630084053') format('woff2'),\n       url('iconfont.woff?t=1625630084053') format('woff'),\n       url('iconfont.ttf?t=1625630084053') format('truetype');\n}\n\n.iconfontxntree {\n  font-family: \"iconfontxntree\" !important;\n  font-size: 16px;\n  font-style: normal;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n.icon-xntreecheckboxtick:before {\n  content: \"\\e64b\";\n}\n\n.icon-xntreefile:before {\n  content: \"\\ea28\";\n}\n\n.icon-xntreezhankai1:before {\n  content: \"\\e66d\";\n}\n\n.icon-xntreewenjianjia:before {\n  content: \"\\e625\";\n}\n\n"],"sourceRoot":""}]);
// Exports
/* harmony default export */ __webpack_exports__["default"] = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./src/xnTree.css":
/*!**************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./src/xnTree.css ***!
  \**************************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../node_modules/css-loader/dist/runtime/cssWithMappingToString.js */ "./node_modules/css-loader/dist/runtime/cssWithMappingToString.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, ".xntree-outer{\r\n    position: relative;\r\n}\r\n.xntree-outer .xntree-cont{\r\n    position: absolute;\r\n    top:0;\r\n    left: 0;\r\n    overflow: hidden;\r\n    transform-origin: left top;\r\n    min-width: 100%;\r\n}\r\n.xntree-outer .xntree-scroll{\r\n\r\n}\r\n.xntree-outer .xntree-item{\r\n    display: flex;\r\n    line-height: 32px;\r\n    font-size: 14px;\r\n    /*padding-left:40px;*/\r\n    position: relative;\r\n    align-items: center;\r\n    height: 32px;\r\n}\r\n.xntree-outer .xntree-item.on{\r\n    background: var(--xntree-on-color);\r\n    color: #fff;\r\n}\r\n\r\n.xntree-outer .xntree-item.on .xn-tree-icons a{\r\n    color: #fff;\r\n}\r\n.xntree-outer .xn-slidedown,.xntree-outer .xn-folder{\r\n    /*position: absolute;*/\r\n    width:15px;\r\n    left:0;\r\n    overflow: hidden;\r\n}\r\n.xntree-outer .xn-slidedown:not(.down):before{\r\n    transform: rotateZ(-90deg);\r\n    position: absolute;\r\n}\r\n.xntree-outer .xn-folder{\r\n    left:15px;\r\n}\r\n.xntree-outer .xn-tree-icons{\r\n    /*width: 30px;*/\r\n    /*flex: 0 0 30px;*/\r\n    display: flex;\r\n    color: #666;\r\n    justify-content: space-between;\r\n    height: 100%;\r\n}\r\n.xntree-outer .xn-tree-icons a{\r\n    flex: 1;\r\n    width: 15px;\r\n}\r\n.xntree-outer .xn-indent{\r\n    display: inline-block;\r\n    width:15px;\r\n    flex: 0 0 15px;\r\n    line-height: inherit;\r\n    height:100%;\r\n}\r\n.xntree-outer .xn-checkbox,.xntree-outer .xn-radio{\r\n    width:14px;\r\n    height: 14px;\r\n    border:1px solid #ccc;\r\n    margin:0 4px;\r\n    flex: 0 0 14px;\r\n    cursor: pointer;\r\n    position: relative;\r\n    box-sizing: border-box;\r\n}\r\n.xntree-outer .xn-radio{\r\n    border-radius: 50%;\r\n}\r\n.xntree-outer .xn-checkbox.on,.xntree-outer .xn-radio.on{\r\n    background:var(--xntree-primary-color);\r\n    border-color: var(--xntree-primary-color);\r\n}\r\n.xntree-outer .xn-checkbox.disable,.xntree-outer .xn-radio.disable{\r\n    background:#efefef;\r\n}\r\n.xntree-outer .xn-checkbox.on:before,.xntree-outer .xn-radio.on:before{\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    color: #fff;\r\n    width: 100%;\r\n    height: 100%;\r\n    font-size: 12px;\r\n    line-height: 11px;\r\n}\r\n.xntree-outer .xn-hide,.xntree-outer .xn-hide-sub{\r\n    display: none;\r\n}\r\n.xntree-outer .xntree-label{\r\n    white-space: nowrap;\r\n    cursor: pointer;\r\n    flex: auto;\r\n}\r\n.xntree-outer .xntree-move{\r\n    width: 100%;\r\n    height: 1px;\r\n    background: #333;\r\n    position: absolute;\r\n    left:0;\r\n    /*display: none;*/\r\n}\r\n.xntree-outer .xntree-item{\r\n    user-select: none;\r\n    box-sizing: border-box;\r\n}\r\n.xntree-outer .xntree-item.xn-onmoving{\r\n    background: var(--xntree-moving-color);\r\n}\r\n/*.xntree-outer .xntree-item:not(.xn-onmoving,.on):hover{*/\r\n/*    background: var(--xntree-hover-color);*/\r\n/*}*/\r\n.xntree-outer:not(.xn-moving) .xntree-item:not(.on):hover{\r\n    background: var(--xntree-hover-color);\r\n}\r\n.xntree-outer .xn-searchedkey{\r\n    color: #fff;\r\n    background: var(--xntree-searched-color);\r\n}\r\n\r\n", "",{"version":3,"sources":["webpack://./src/xnTree.css"],"names":[],"mappings":"AAAA;IACI,kBAAkB;AACtB;AACA;IACI,kBAAkB;IAClB,KAAK;IACL,OAAO;IACP,gBAAgB;IAChB,0BAA0B;IAC1B,eAAe;AACnB;AACA;;AAEA;AACA;IACI,aAAa;IACb,iBAAiB;IACjB,eAAe;IACf,qBAAqB;IACrB,kBAAkB;IAClB,mBAAmB;IACnB,YAAY;AAChB;AACA;IACI,kCAAkC;IAClC,WAAW;AACf;;AAEA;IACI,WAAW;AACf;AACA;IACI,sBAAsB;IACtB,UAAU;IACV,MAAM;IACN,gBAAgB;AACpB;AACA;IACI,0BAA0B;IAC1B,kBAAkB;AACtB;AACA;IACI,SAAS;AACb;AACA;IACI,eAAe;IACf,kBAAkB;IAClB,aAAa;IACb,WAAW;IACX,8BAA8B;IAC9B,YAAY;AAChB;AACA;IACI,OAAO;IACP,WAAW;AACf;AACA;IACI,qBAAqB;IACrB,UAAU;IACV,cAAc;IACd,oBAAoB;IACpB,WAAW;AACf;AACA;IACI,UAAU;IACV,YAAY;IACZ,qBAAqB;IACrB,YAAY;IACZ,cAAc;IACd,eAAe;IACf,kBAAkB;IAClB,sBAAsB;AAC1B;AACA;IACI,kBAAkB;AACtB;AACA;IACI,sCAAsC;IACtC,yCAAyC;AAC7C;AACA;IACI,kBAAkB;AACtB;AACA;IACI,kBAAkB;IAClB,MAAM;IACN,OAAO;IACP,WAAW;IACX,WAAW;IACX,YAAY;IACZ,eAAe;IACf,iBAAiB;AACrB;AACA;IACI,aAAa;AACjB;AACA;IACI,mBAAmB;IACnB,eAAe;IACf,UAAU;AACd;AACA;IACI,WAAW;IACX,WAAW;IACX,gBAAgB;IAChB,kBAAkB;IAClB,MAAM;IACN,iBAAiB;AACrB;AACA;IACI,iBAAiB;IACjB,sBAAsB;AAC1B;AACA;IACI,sCAAsC;AAC1C;AACA,0DAA0D;AAC1D,6CAA6C;AAC7C,IAAI;AACJ;IACI,qCAAqC;AACzC;AACA;IACI,WAAW;IACX,wCAAwC;AAC5C","sourcesContent":[".xntree-outer{\r\n    position: relative;\r\n}\r\n.xntree-outer .xntree-cont{\r\n    position: absolute;\r\n    top:0;\r\n    left: 0;\r\n    overflow: hidden;\r\n    transform-origin: left top;\r\n    min-width: 100%;\r\n}\r\n.xntree-outer .xntree-scroll{\r\n\r\n}\r\n.xntree-outer .xntree-item{\r\n    display: flex;\r\n    line-height: 32px;\r\n    font-size: 14px;\r\n    /*padding-left:40px;*/\r\n    position: relative;\r\n    align-items: center;\r\n    height: 32px;\r\n}\r\n.xntree-outer .xntree-item.on{\r\n    background: var(--xntree-on-color);\r\n    color: #fff;\r\n}\r\n\r\n.xntree-outer .xntree-item.on .xn-tree-icons a{\r\n    color: #fff;\r\n}\r\n.xntree-outer .xn-slidedown,.xntree-outer .xn-folder{\r\n    /*position: absolute;*/\r\n    width:15px;\r\n    left:0;\r\n    overflow: hidden;\r\n}\r\n.xntree-outer .xn-slidedown:not(.down):before{\r\n    transform: rotateZ(-90deg);\r\n    position: absolute;\r\n}\r\n.xntree-outer .xn-folder{\r\n    left:15px;\r\n}\r\n.xntree-outer .xn-tree-icons{\r\n    /*width: 30px;*/\r\n    /*flex: 0 0 30px;*/\r\n    display: flex;\r\n    color: #666;\r\n    justify-content: space-between;\r\n    height: 100%;\r\n}\r\n.xntree-outer .xn-tree-icons a{\r\n    flex: 1;\r\n    width: 15px;\r\n}\r\n.xntree-outer .xn-indent{\r\n    display: inline-block;\r\n    width:15px;\r\n    flex: 0 0 15px;\r\n    line-height: inherit;\r\n    height:100%;\r\n}\r\n.xntree-outer .xn-checkbox,.xntree-outer .xn-radio{\r\n    width:14px;\r\n    height: 14px;\r\n    border:1px solid #ccc;\r\n    margin:0 4px;\r\n    flex: 0 0 14px;\r\n    cursor: pointer;\r\n    position: relative;\r\n    box-sizing: border-box;\r\n}\r\n.xntree-outer .xn-radio{\r\n    border-radius: 50%;\r\n}\r\n.xntree-outer .xn-checkbox.on,.xntree-outer .xn-radio.on{\r\n    background:var(--xntree-primary-color);\r\n    border-color: var(--xntree-primary-color);\r\n}\r\n.xntree-outer .xn-checkbox.disable,.xntree-outer .xn-radio.disable{\r\n    background:#efefef;\r\n}\r\n.xntree-outer .xn-checkbox.on:before,.xntree-outer .xn-radio.on:before{\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    color: #fff;\r\n    width: 100%;\r\n    height: 100%;\r\n    font-size: 12px;\r\n    line-height: 11px;\r\n}\r\n.xntree-outer .xn-hide,.xntree-outer .xn-hide-sub{\r\n    display: none;\r\n}\r\n.xntree-outer .xntree-label{\r\n    white-space: nowrap;\r\n    cursor: pointer;\r\n    flex: auto;\r\n}\r\n.xntree-outer .xntree-move{\r\n    width: 100%;\r\n    height: 1px;\r\n    background: #333;\r\n    position: absolute;\r\n    left:0;\r\n    /*display: none;*/\r\n}\r\n.xntree-outer .xntree-item{\r\n    user-select: none;\r\n    box-sizing: border-box;\r\n}\r\n.xntree-outer .xntree-item.xn-onmoving{\r\n    background: var(--xntree-moving-color);\r\n}\r\n/*.xntree-outer .xntree-item:not(.xn-onmoving,.on):hover{*/\r\n/*    background: var(--xntree-hover-color);*/\r\n/*}*/\r\n.xntree-outer:not(.xn-moving) .xntree-item:not(.on):hover{\r\n    background: var(--xntree-hover-color);\r\n}\r\n.xntree-outer .xn-searchedkey{\r\n    color: #fff;\r\n    background: var(--xntree-searched-color);\r\n}\r\n\r\n"],"sourceRoot":""}]);
// Exports
/* harmony default export */ __webpack_exports__["default"] = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/api.js":
/*!*****************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/api.js ***!
  \*****************************************************/
/***/ (function(module) {

"use strict";


/*
  MIT License http://www.opensource.org/licenses/mit-license.php
  Author Tobias Koppers @sokra
*/
// css base code, injected by the css-loader
// eslint-disable-next-line func-names
module.exports = function (cssWithMappingToString) {
  var list = []; // return the list of modules as css string

  list.toString = function toString() {
    return this.map(function (item) {
      var content = cssWithMappingToString(item);

      if (item[2]) {
        return "@media ".concat(item[2], " {").concat(content, "}");
      }

      return content;
    }).join("");
  }; // import a list of modules into the list
  // eslint-disable-next-line func-names


  list.i = function (modules, mediaQuery, dedupe) {
    if (typeof modules === "string") {
      // eslint-disable-next-line no-param-reassign
      modules = [[null, modules, ""]];
    }

    var alreadyImportedModules = {};

    if (dedupe) {
      for (var i = 0; i < this.length; i++) {
        // eslint-disable-next-line prefer-destructuring
        var id = this[i][0];

        if (id != null) {
          alreadyImportedModules[id] = true;
        }
      }
    }

    for (var _i = 0; _i < modules.length; _i++) {
      var item = [].concat(modules[_i]);

      if (dedupe && alreadyImportedModules[item[0]]) {
        // eslint-disable-next-line no-continue
        continue;
      }

      if (mediaQuery) {
        if (!item[2]) {
          item[2] = mediaQuery;
        } else {
          item[2] = "".concat(mediaQuery, " and ").concat(item[2]);
        }
      }

      list.push(item);
    }
  };

  return list;
};

/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/cssWithMappingToString.js":
/*!************************************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/cssWithMappingToString.js ***!
  \************************************************************************/
/***/ (function(module) {

"use strict";


function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

module.exports = function cssWithMappingToString(item) {
  var _item = _slicedToArray(item, 4),
      content = _item[1],
      cssMapping = _item[3];

  if (typeof btoa === "function") {
    // eslint-disable-next-line no-undef
    var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(cssMapping))));
    var data = "sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(base64);
    var sourceMapping = "/*# ".concat(data, " */");
    var sourceURLs = cssMapping.sources.map(function (source) {
      return "/*# sourceURL=".concat(cssMapping.sourceRoot || "").concat(source, " */");
    });
    return [content].concat(sourceURLs).concat([sourceMapping]).join("\n");
  }

  return [content].join("\n");
};

/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/getUrl.js":
/*!********************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/getUrl.js ***!
  \********************************************************/
/***/ (function(module) {

"use strict";


module.exports = function (url, options) {
  if (!options) {
    // eslint-disable-next-line no-param-reassign
    options = {};
  } // eslint-disable-next-line no-underscore-dangle, no-param-reassign


  url = url && url.__esModule ? url.default : url;

  if (typeof url !== "string") {
    return url;
  } // If url is already wrapped in quotes, remove them


  if (/^['"].*['"]$/.test(url)) {
    // eslint-disable-next-line no-param-reassign
    url = url.slice(1, -1);
  }

  if (options.hash) {
    // eslint-disable-next-line no-param-reassign
    url += options.hash;
  } // Should url be wrapped?
  // See https://drafts.csswg.org/css-values-3/#urls


  if (/["'() \t\n]/.test(url) || options.needQuotes) {
    return "\"".concat(url.replace(/"/g, '\\"').replace(/\n/g, "\\n"), "\"");
  }

  return url;
};

/***/ }),

/***/ "./src/iconfont/iconfont.ttf?t=1625630084053":
/*!***************************************************!*\
  !*** ./src/iconfont/iconfont.ttf?t=1625630084053 ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = (__webpack_require__.p + "fonts/b9d2753f9c6eb640c4c95e8009e69f94.ttf");

/***/ }),

/***/ "./src/iconfont/iconfont.woff2?t=1625630084053":
/*!*****************************************************!*\
  !*** ./src/iconfont/iconfont.woff2?t=1625630084053 ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = (__webpack_require__.p + "fonts/87ebdc0f30585dff52505d636b7f03a9.woff2");

/***/ }),

/***/ "./src/iconfont/iconfont.woff?t=1625630084053":
/*!****************************************************!*\
  !*** ./src/iconfont/iconfont.woff?t=1625630084053 ***!
  \****************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = (__webpack_require__.p + "fonts/9877ea728b7d9dcf1cdc6fd2c613addb.woff");

/***/ }),

/***/ "./src/colorTheme.css":
/*!****************************!*\
  !*** ./src/colorTheme.css ***!
  \****************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_cjs_js_colorTheme_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !!../node_modules/css-loader/dist/cjs.js!./colorTheme.css */ "./node_modules/css-loader/dist/cjs.js!./src/colorTheme.css");

            

var options = {};

options.insert = "head";
options.singleton = false;

var update = _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_css_loader_dist_cjs_js_colorTheme_css__WEBPACK_IMPORTED_MODULE_1__.default, options);



/* harmony default export */ __webpack_exports__["default"] = (_node_modules_css_loader_dist_cjs_js_colorTheme_css__WEBPACK_IMPORTED_MODULE_1__.default.locals || {});

/***/ }),

/***/ "./src/iconfont/iconfont.css":
/*!***********************************!*\
  !*** ./src/iconfont/iconfont.css ***!
  \***********************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_cjs_js_iconfont_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !!../../node_modules/css-loader/dist/cjs.js!./iconfont.css */ "./node_modules/css-loader/dist/cjs.js!./src/iconfont/iconfont.css");

            

var options = {};

options.insert = "head";
options.singleton = false;

var update = _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_css_loader_dist_cjs_js_iconfont_css__WEBPACK_IMPORTED_MODULE_1__.default, options);



/* harmony default export */ __webpack_exports__["default"] = (_node_modules_css_loader_dist_cjs_js_iconfont_css__WEBPACK_IMPORTED_MODULE_1__.default.locals || {});

/***/ }),

/***/ "./src/xnTree.css":
/*!************************!*\
  !*** ./src/xnTree.css ***!
  \************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_cjs_js_xnTree_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !!../node_modules/css-loader/dist/cjs.js!./xnTree.css */ "./node_modules/css-loader/dist/cjs.js!./src/xnTree.css");

            

var options = {};

options.insert = "head";
options.singleton = false;

var update = _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_css_loader_dist_cjs_js_xnTree_css__WEBPACK_IMPORTED_MODULE_1__.default, options);



/* harmony default export */ __webpack_exports__["default"] = (_node_modules_css_loader_dist_cjs_js_xnTree_css__WEBPACK_IMPORTED_MODULE_1__.default.locals || {});

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js":
/*!****************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js ***!
  \****************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


var isOldIE = function isOldIE() {
  var memo;
  return function memorize() {
    if (typeof memo === 'undefined') {
      // Test for IE <= 9 as proposed by Browserhacks
      // @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805
      // Tests for existence of standard globals is to allow style-loader
      // to operate correctly into non-standard environments
      // @see https://github.com/webpack-contrib/style-loader/issues/177
      memo = Boolean(window && document && document.all && !window.atob);
    }

    return memo;
  };
}();

var getTarget = function getTarget() {
  var memo = {};
  return function memorize(target) {
    if (typeof memo[target] === 'undefined') {
      var styleTarget = document.querySelector(target); // Special case to return head of iframe instead of iframe itself

      if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {
        try {
          // This will throw an exception if access to iframe is blocked
          // due to cross-origin restrictions
          styleTarget = styleTarget.contentDocument.head;
        } catch (e) {
          // istanbul ignore next
          styleTarget = null;
        }
      }

      memo[target] = styleTarget;
    }

    return memo[target];
  };
}();

var stylesInDom = [];

function getIndexByIdentifier(identifier) {
  var result = -1;

  for (var i = 0; i < stylesInDom.length; i++) {
    if (stylesInDom[i].identifier === identifier) {
      result = i;
      break;
    }
  }

  return result;
}

function modulesToDom(list, options) {
  var idCountMap = {};
  var identifiers = [];

  for (var i = 0; i < list.length; i++) {
    var item = list[i];
    var id = options.base ? item[0] + options.base : item[0];
    var count = idCountMap[id] || 0;
    var identifier = "".concat(id, " ").concat(count);
    idCountMap[id] = count + 1;
    var index = getIndexByIdentifier(identifier);
    var obj = {
      css: item[1],
      media: item[2],
      sourceMap: item[3]
    };

    if (index !== -1) {
      stylesInDom[index].references++;
      stylesInDom[index].updater(obj);
    } else {
      stylesInDom.push({
        identifier: identifier,
        updater: addStyle(obj, options),
        references: 1
      });
    }

    identifiers.push(identifier);
  }

  return identifiers;
}

function insertStyleElement(options) {
  var style = document.createElement('style');
  var attributes = options.attributes || {};

  if (typeof attributes.nonce === 'undefined') {
    var nonce =  true ? __webpack_require__.nc : 0;

    if (nonce) {
      attributes.nonce = nonce;
    }
  }

  Object.keys(attributes).forEach(function (key) {
    style.setAttribute(key, attributes[key]);
  });

  if (typeof options.insert === 'function') {
    options.insert(style);
  } else {
    var target = getTarget(options.insert || 'head');

    if (!target) {
      throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");
    }

    target.appendChild(style);
  }

  return style;
}

function removeStyleElement(style) {
  // istanbul ignore if
  if (style.parentNode === null) {
    return false;
  }

  style.parentNode.removeChild(style);
}
/* istanbul ignore next  */


var replaceText = function replaceText() {
  var textStore = [];
  return function replace(index, replacement) {
    textStore[index] = replacement;
    return textStore.filter(Boolean).join('\n');
  };
}();

function applyToSingletonTag(style, index, remove, obj) {
  var css = remove ? '' : obj.media ? "@media ".concat(obj.media, " {").concat(obj.css, "}") : obj.css; // For old IE

  /* istanbul ignore if  */

  if (style.styleSheet) {
    style.styleSheet.cssText = replaceText(index, css);
  } else {
    var cssNode = document.createTextNode(css);
    var childNodes = style.childNodes;

    if (childNodes[index]) {
      style.removeChild(childNodes[index]);
    }

    if (childNodes.length) {
      style.insertBefore(cssNode, childNodes[index]);
    } else {
      style.appendChild(cssNode);
    }
  }
}

function applyToTag(style, options, obj) {
  var css = obj.css;
  var media = obj.media;
  var sourceMap = obj.sourceMap;

  if (media) {
    style.setAttribute('media', media);
  } else {
    style.removeAttribute('media');
  }

  if (sourceMap && typeof btoa !== 'undefined') {
    css += "\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), " */");
  } // For old IE

  /* istanbul ignore if  */


  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    while (style.firstChild) {
      style.removeChild(style.firstChild);
    }

    style.appendChild(document.createTextNode(css));
  }
}

var singleton = null;
var singletonCounter = 0;

function addStyle(obj, options) {
  var style;
  var update;
  var remove;

  if (options.singleton) {
    var styleIndex = singletonCounter++;
    style = singleton || (singleton = insertStyleElement(options));
    update = applyToSingletonTag.bind(null, style, styleIndex, false);
    remove = applyToSingletonTag.bind(null, style, styleIndex, true);
  } else {
    style = insertStyleElement(options);
    update = applyToTag.bind(null, style, options);

    remove = function remove() {
      removeStyleElement(style);
    };
  }

  update(obj);
  return function updateStyle(newObj) {
    if (newObj) {
      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap) {
        return;
      }

      update(obj = newObj);
    } else {
      remove();
    }
  };
}

module.exports = function (list, options) {
  options = options || {}; // Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
  // tags it will allow on a page

  if (!options.singleton && typeof options.singleton !== 'boolean') {
    options.singleton = isOldIE();
  }

  list = list || [];
  var lastIdentifiers = modulesToDom(list, options);
  return function update(newList) {
    newList = newList || [];

    if (Object.prototype.toString.call(newList) !== '[object Array]') {
      return;
    }

    for (var i = 0; i < lastIdentifiers.length; i++) {
      var identifier = lastIdentifiers[i];
      var index = getIndexByIdentifier(identifier);
      stylesInDom[index].references--;
    }

    var newLastIdentifiers = modulesToDom(newList, options);

    for (var _i = 0; _i < lastIdentifiers.length; _i++) {
      var _identifier = lastIdentifiers[_i];

      var _index = getIndexByIdentifier(_identifier);

      if (stylesInDom[_index].references === 0) {
        stylesInDom[_index].updater();

        stylesInDom.splice(_index, 1);
      }
    }

    lastIdentifiers = newLastIdentifiers;
  };
};

/***/ }),

/***/ "./src/xnquery.js":
/*!************************!*\
  !*** ./src/xnquery.js ***!
  \************************/
/***/ (function() {

//! xnquery.js
//! 仙女座js方法库，使用es6实现部分jquery方法
//! version : 1.0.1
//! authors : 范媛媛
//! create date:2021/01/27 V1.0.0
//! create date:2021/01/28 V1.0.1
// https://github.com/fanaiai/xndatepicker
(function (window) {
    function init(el) {
        if (typeof el == 'string') {
            this.el = this.ConvertToArray(document.querySelectorAll(el));
        }
        if (el instanceof NodeList) {
            this.el = this.ConvertToArray(el);
        } else if (Array.isArray(el)) {
            this.el = el;
        }
        if (el instanceof Node) {
            this.el = [el]
        }
        if (!this.el) {
            this.el = [];
        }
    }

    function XNQuery(el) {
        return new init(el);
    }

    XNQuery.prototype = init.prototype = {
        length() {
            return this.el.length;
        },
        extend() {
            var options, name, src, copy, copyIsArray, clone,
                target = arguments[0] || {}, // 目标对象
                i = 1,
                length = arguments.length,
                deep = false;
            // 处理深度拷贝情况（第一个参数是boolean类型且为true）
            if (typeof target === "boolean") {
                deep = target;
                target = arguments[1] || {};
                // 跳过第一个参数（是否深度拷贝）和第二个参数（目标对象）
                i = 2;
            }
            // 如果目标不是对象或函数，则初始化为空对象
            if (typeof target !== "object") {
                target = {};
            }
            // 如果只指定了一个参数，则使用jQuery自身作为目标对象
            if (length === i) {
                target = this;
                --i;
            }
            for (; i < length; i++) {
                // Only deal with non-null/undefined values
                if ((options = arguments[i]) != null) {
                    // Extend the base object
                    for (name in options) {
                        src = target[name];
                        copy = options[name];
                        // Prevent never-ending loop
                        if (target === copy) {
                            continue;
                        }
                        let copyIsArray = Array.isArray(copy)
                        // 如果对象中包含了数组或者其他对象，则使用递归进行拷贝
                        if (deep && copy && (typeof copy == 'object' || (copyIsArray))) {
                            // 处理数组
                            if (copyIsArray) {
                                copyIsArray = false;
                                // 如果目标对象不存在该数组，则创建一个空数组；
                                clone = src && Array.isArray(src) ? src : [];
                            } else {
                                clone = src && typeof src == 'object' ? src : {};
                            }
                            // 从不改变原始对象，只做拷贝
                            target[name] = this.extend(deep, clone, copy);
                            // 不拷贝undefined值
                        } else if (copy !== undefined) {
                            target[name] = copy;
                        }
                    }
                }
            }
            // 返回已经被修改的对象
            return target;
        },
        parent() {
            let el = this.el[0]
            if (el && el.parentNode) {
                return XNQuery([el.parentNode])
            } else {
                return XNQuery([])
            }
        },
        parents(parentSelector /* optional */) {
            let el = this.el[0]
            if (parentSelector === undefined) {
                parentSelector = [document];
            } else {
                parentSelector = this.ConvertToArray(document.querySelectorAll(parentSelector))
            }
            var parents = [];
            if (el) {
                parentSelector.forEach((e) => {
                    var p = el.parentNode;
                    while (p != e && p != null) {
                        p = p.parentNode;
                    }

                    if (p != null) {
                        parents.push(p);
                    }
                })
            }
            return XNQuery(parents)
            // var p = el.parentNode;
            // console.log(parentSelector,p)
            // while (p !== parentSelector && p!=null) {
            //     var o = p;
            //     console.log(o)
            //     parents.push(o);
            //     p = o.parentNode;
            // }
            // parents.push(parentSelector); // Push that parentSelector you wanted to stop at
            // console.log(parents);
            // // return parents;
            // return XNQuery(this.reverseArryToNodeList(parents))
        },
        reverseArryToNodeList(arry) {
            return arry
            var div = document.createElement('div')
            for (let i = 0; i < arry.length; i++) {
                div.appendChild(arry[i])
            }
            return div.childNodes;
        },
        hasClass(className) {
            if (this.el.length > 0) {
                return this.el[0].classList.contains(className);
            } else {
                return false;
            }
        },
        attr(attr, value) {
            if (value) {
                this.el.forEach((e) => {
                    e.setAttribute(attr, value)
                })
                return this;
            } else {
                if (!this.el[0]) {
                    return null;
                }
                return this.el[0].getAttribute(attr)
            }
        },
        find(query) {
            if (!this.el || this.el.length <= 0) {
                return XNQuery([]);
            }
            if (typeof query != 'string') {
                var list = [];
                this.el.forEach((e) => {
                    var arry = e.querySelectorAll('*');
                    for (let i = 0; i < arry.length; i++) {
                        if (arry[i] == query) {
                            list.push(query)
                        }
                    }
                })
                return XNQuery(list)
            } else {
                var list = [];
                this.el.forEach((e) => {
                    list = list.concat(this.ConvertToArray(e.querySelectorAll(query)))
                })
                return XNQuery(list);
            }
        },
        children(query) {
            if (!this.el || this.el.length <= 0) {
                return XNQuery([]);
            }
            var queryList = [];
            if (Array.isArray(query)) {
                queryList = query;
            }
            var children = []
            this.el.forEach((e) => {
                children = children.concat(this.ConvertToArray(e.children))
                if (typeof query == 'string') {
                    queryList = queryList.concat(this.ConvertToArray(e.querySelectorAll(query)))
                }

            })
            var list = [];
            var queryListLength = queryList.length;
            for (let i = 0; i < children.length; i++) {
                let c = children[i];
                for (let j = 0; j < queryListLength; j++) {
                    if (queryList[j] == c) {
                        list.push(c);
                        break;
                    }
                }
            }
            return XNQuery(list);
        },
        each(callback) {
            return this.el.forEach(callback)
        },
        index(targetDom) {
            if (!targetDom) {
                var list = this.el[0].parentNode.childNodes;
                for (let i = 0; i < list.length; i++) {
                    if (list[i] == this.el[0]) {
                        return i;
                    }
                }
                return null;
            } else {
                for (let i = 0; i < this.el.length; i++) {
                    if (this.el[i] == targetDom) {
                        return i;
                    }
                }
            }
        },
        eq(index) {
            var el = this.el[index];
            if (el) {
                return XNQuery(this.reverseArryToNodeList([el]))
            } else {
                return XNQuery(this.reverseArryToNodeList([]))
            }
        },
        get(index) {
            return this.el[index]
        },
        addClass(classname) {
            this.el.forEach((e) => {
                if (e.classList) {
                    e.classList.add(...classname.split(' '))
                }
            })
        },
        nextUntil(query, isprev) {
            var el = this.el[0]
            if (!el) {
                return XNQuery([]);
            }
            if (!query) {
                var next = null;
            } else {
                if (typeof query == 'object' && query instanceof Node) {
                    var next = query;
                } else {
                    var next = el.parentNode.querySelector(query)
                }
            }
            var list = [];
            var func = isprev ? 'previousSibling' : 'nextSibling'
            var n = el[func];
            while (n != next && n != null) {
                list.push(n)
                n = n[func];
            }
            return XNQuery(list)
        },
        filter(callback) {
            let l=this.el.filter((e,i)=>{
                return callback(i,e)
            })
            return l;
        },
        prevAll() {
            return this.nextUntil(null, true)
        },
        nextAll() {
            return this.nextUntil()
        },
        removeClass(classname) {
            this.el.forEach((e) => {
                e.classList.remove(classname)
            })
            return this;
        },
        val(val) {
            if (!val) {
                return this.el[0].value;
            } else {
                this.el.forEach((e) => {
                    e.value = val;
                })
            }
        },
        html(val) {
            if (!this.el || !this.el[0]) {
                return;
            }
            if (!val) {
                return this.el[0].innerHTML;
            } else {
                this.el.forEach((e) => {
                    e.innerHTML = val;
                })
            }
        },
        empty() {
            this.el.forEach((e) => {
                e.innerHTML = '';
            })
            return this;
        },
        parseToDOM(str) {
            var div = document.createElement("div");
            if (typeof str == "string") {
                div.innerHTML = str;
            }
            return div.childNodes;
        },
        ConvertToArray(nodes) {
            var array = null;
            try {
                array = Array.prototype.slice.call(nodes, 0);//非ie浏览器  ie8-将NodeList实现为COM对象，不能用这种方式检测
            } catch (ex) {//ie8-
                array = new Array();
                for (var i = 0; i < nodes.length; i++) {
                    array.push(nodes[0]);
                }
            }
            return array;
        },
        parseDomToString(dom) {

        },
        append(newel) {
            var newele;
            if (typeof newel == 'string') {
                newele = this.parseToDOM(newel)
                newele = this.ConvertToArray(newele)
            } else {
                newele = [newel];
            }
            for (let i = 0; i < newele.length; i++) {
                let newe = newele[i]
                this.el.forEach((e) => {
                    e.appendChild(newe)
                })
            }
        },
        remove() {
            this.el.forEach((e) => {
                if (e.parentNode) {
                    e.parentNode.removeChild(e)
                }
            })

        },
        slideUp(time) {
            this.el.forEach((e) => {
                e.style.display = 'none'
            })
        },
        css(...css) {
            if (typeof css[0] == 'object') {
                for (let i in css[0]) {
                    this.el.forEach((e) => {
                        e.style[i] = css[0][i]
                    })
                }
                return this;
            } else {
                if (css.length == 1) {
                    return this.el[0].style[css[0]]
                }
                if (css.length == 2) {
                    this.el.forEach((e) => {
                        e.style[css[0]] = css[1]
                    })
                    return this;
                }
            }
        },
        fadeOut(time) {
            this.el.forEach((e) => {
                this.animate({opacity: 0}, time, e, () => {
                    e.style.display = 'none'
                })
            })
        },
        fadeIn(time) {
            this.el.forEach((e) => {
                e.style.display = 'block'
                // e.style.opacity = 1;
                this.animate({opacity: 1}, time, e)
            })
        },
        animate(css, time, ele, callback) {
            if (!time) {
                time = 300;
            }
            var totalTimes = time / 50;
            var initTime = 0;
            var initCss = {};
            for (let i in css) {
                if (!isNaN(parseFloat(css[i]))) {
                    initCss[i] = {
                        init: parseFloat(ele.style[i]) || 0,
                        unit: String(css[i]).substring(String(parseFloat(css[i])).length)
                    };
                }
            }
            var interval = window.setInterval(() => {
                for (let i in initCss) {
                    if (initTime >= totalTimes) {
                        ele.style[i] = css[i];
                    } else {
                        ele.style[i] = ((parseFloat(css[i]) - initCss[i].init) * initTime / totalTimes + initCss[i].init) + initCss[i].unit;
                    }

                }
                if (initTime >= totalTimes) {
                    if (typeof callback == 'function') {
                        callback()
                    }
                    window.clearInterval(interval);
                }
                initTime++;
            }, 20)
        },
        outerWidth() {
            var el = this.el[0];
            return el.offsetWidth
        },
        outerHeight() {
            var el = this.el[0];
            return el.offsetHeight
        },
        hide() {
            this.el.forEach((e) => {
                e.style.display = 'none'
            })
            return this;
        },
        show() {
            this.el.forEach((e) => {
                e.style.display = 'block'
            })
            return this;
        },
        position() {
            return {
                top: this.el[0].offsetTop,
                left: this.el[0].offsetLeft,
            }
        },
        not(dom) {
            this.el = this.el.filter((e) => {
                return e != dom;
            })
            return this;
        }
    }
    XNQuery.__proto__.get=()=>{
        return this.el
    }
    XNQuery.extend = XNQuery.prototype.extend;
    window.XNQuery = XNQuery;
})(window)


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		if(__webpack_module_cache__[moduleId]) {
/******/ 			return __webpack_module_cache__[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	!function() {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = function(module) {
/******/ 			var getter = module && module.__esModule ?
/******/ 				function() { return module['default']; } :
/******/ 				function() { return module; };
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	!function() {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = function(exports, definition) {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	!function() {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	!function() {
/******/ 		__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/publicPath */
/******/ 	!function() {
/******/ 		var scriptUrl;
/******/ 		if (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + "";
/******/ 		var document = __webpack_require__.g.document;
/******/ 		if (!scriptUrl && document) {
/******/ 			if (document.currentScript)
/******/ 				scriptUrl = document.currentScript.src
/******/ 			if (!scriptUrl) {
/******/ 				var scripts = document.getElementsByTagName("script");
/******/ 				if(scripts.length) scriptUrl = scripts[scripts.length - 1].src
/******/ 			}
/******/ 		}
/******/ 		// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration
/******/ 		// or pass an empty string ("") and set the __webpack_public_path__ variable from your code to use your own logic.
/******/ 		if (!scriptUrl) throw new Error("Automatic publicPath is not supported in this browser");
/******/ 		scriptUrl = scriptUrl.replace(/#.*$/, "").replace(/\?.*$/, "").replace(/\/[^\/]+$/, "/");
/******/ 		__webpack_require__.p = scriptUrl;
/******/ 	}();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
!function() {
"use strict";
/*!***********************!*\
  !*** ./src/xnTree.js ***!
  \***********************/
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _xnTree_css__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./xnTree.css */ "./src/xnTree.css");
/* harmony import */ var _colorTheme_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./colorTheme.css */ "./src/colorTheme.css");
/* harmony import */ var _xnquery_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./xnquery.js */ "./src/xnquery.js");
/* harmony import */ var _xnquery_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_xnquery_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _iconfont_iconfont_css__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./iconfont/iconfont.css */ "./src/iconfont/iconfont.css");





let $ = window.XNQuery;
let defaultOption = {
    label: 'text',
    id: 'id',
    lineHeight: 32,
    dataType: 'tree',
    lazyLoad:false,
    // pId: 'parentid',
    selectType: 'checkbox',//radio,null
    checkDisabled: function (d) {
        return false
    },
    autoOpen: function (d, level) {
        return level <= 2;
    },
    checkSticky: {//check关联
        on: 'pc',//p,自动勾选父，c自动勾选子，function
        off: 'pc'
    },
    editNode: function (d) {
        return true
    },
    deleteNode: function (d) {
        return true;
    },
    addChildNode: function (d) {
        return true;
    }
};

class xnTree {
    constructor(container, data, option) {
        this.container = container;
        this.container.classList.add('xntree-outer')
        this.option = $.extend(true, {}, defaultOption, option);
        if (option.dataType == 'list') {
            this.data = this.revertListToTree(data);
        } else {
            this.data = $.extend(true, [], data);
        }
        this.flatList = {};
        this.flatListKeys = [];

        this.totalNum = parseInt((this.container.clientHeight || document.body.clientHeight) / this.option.lineHeight);
        this.topIndex = 0;
        this.bottomIndex = this.totalNum + 4;
        this.slidedownHTML = {
            'up': '<a class="xn-slidedown iconfontxntree icon-xntreezhankai1"></a>',
            'down': '<a class="xn-slidedown down iconfontxntree icon-xntreezhankai1"></a>',
        }
        this.iconHTML = {
            folder: '<a class="xn-folder iconfontxntree icon-xntreewenjianjia"></a>',
            file: '<a class="xn-file iconfontxntree icon-xntreefile"></a>'
        }
        this.selectHTML = {
            checkbox: `
        <div class="xn-checkbox"></div>
        `,
            checkboxon: `
        <div class="xn-checkbox on iconfontxntree icon-xntreecheckboxtick"></div>
        `,
            checkboxdisable: `
        <div class="xn-checkbox disable"></div>
        `,
            radio: `
        <div class="xn-radio"></div>
        `,
            radioon: `
        <div class="xn-radio on iconfontxntree icon-xntreecheckboxtick"></div>
        `,
            radiodisable: `
        <div class="xn-radio disable"></div>
        `
        }
        this.checked = {
            nodes: [],
            keys: []
        }
        this.clicked = null;
        this.getFlatData();
        this.init();
        this.addResizeObserve()

    }

    addResizeObserve() {
        this.resizeObserver = new ResizeObserver(entries => {
            this.totalNum = parseInt((this.container.clientHeight || document.body.clientHeight) / this.option.lineHeight);
            this.refreshDom(true)
        });
        this.resizeObserver.observe(this.container)

    }

    init() {
        // console.log(this.data);
        this.rendDom();
        this.addEvent();
    }

    addMoveDom() {
        return `
        <div class="xntree-move"></div>
        `
    }

    rendDom() {
        this.openNumber = 0;
        this.dom = '<div class="xntree-cont">'
        this.index = 0;
        this.dom += this._rendHTML(this.data, 0) + "</div>"
        let movedom = this.addMoveDom();
        let scrollDom = '<div class="xntree-scroll" style="height:' + this.openNumber * this.option.lineHeight + 'px"></div>'
        this.container.innerHTML = scrollDom + this.dom + movedom;
        this.movedom = this.container.querySelector('.xntree-move')
        this.scrollDom = this.container.querySelector('.xntree-scroll')
        this.setScrollWidth();
    }

    setScrollWidth() {
        let width = this.container.querySelector(".xntree-cont").clientWidth;
        this.scrollDom.style.minWidth = width + 'px'
    }

    _rendHTML(list, level, justScroll) {
        let dom = '';
        let span = '';
        for (let i = 0; i < level; i++) {
            span += '<span class="xn-indent"></span>'
        }
        for (let i = 0; i < list.length; i++) {
            let l = list[i];
            if (l.$show) {
                if (this.seachKeys && !this.searchKeysJson[l[this.option.id]]) {
                    continue
                } else {
                    this.index++;
                    this.openNumber++;
                    if (this.clicked && this.clicked[this.option.id] == l.id) {
                        this.calcCurrent = false;
                    }
                    if (this.calcCurrent) {
                        this.currentNumber++;
                    }
                }
            }
            if (this.index - 1 >= this.topIndex && this.index <= this.bottomIndex) {
                if (l.$show) {
                    let [h] = this._rendOneNode(l, span, level, l.$show);
                    dom += h;
                }
            } else if (justScroll && this.index > this.bottomIndex) {
                return dom;
            }
            if (l.children && l.children.length > 0 && l.$show) {
                let cDom = this._rendHTML(l.children, level + 1, justScroll)
                dom += cDom;
            }
        }
        return dom;
    }


    _rendOneNode(l, span, level, open) {
        let pre = '<div class="xn-tree-icons">'
        if ((l.$show && l.children && l.children[0])||this.option.lazyLoad) {
            pre += this.slidedownHTML[(l.children && l.children[0] && l.children[0].$show) ? 'down' : 'up']
        } else {
            pre += '<a></a>'
        }
        if (!this.option.hideIcon) {
            let icon = (l.children && l.children.length > 0) ? 'folder' : 'file'
            pre += this.iconHTML[icon]
        }
        pre += '</div>'
        l.$level = level;
        if (!span) {
            span = ''
            for (let i = 0; i < level; i++) {
                span += '<span class="xn-indent"></span>'
            }
        }
        let label = '';
        if (typeof this.option.label == 'string') {
            label = l[this.option.label]
            if (this.searchKeyword) {
                label = this.replaceKey(label, this.searchKeyword)
            }
        } else if (typeof this.option.label == 'function') {
            label = this.option.label(l, this, this.searchKeyword)
        }

        // let ope = `<div class="xntree-ope">`
        // if (this.option.addChildNode(l)) {
        //     ope += `<a class="xntree-add"></a>`
        // }
        // if (this.option.editNode(l)) {
        //     ope += `<a class="xntree-edit"></a>`
        // }
        // if (this.option.deleteNode(l)) {
        //     ope += `<a class="xntree-delete"></a>`
        // }
        // ope += `</div>`
        let selectDom = '';
        if (this.option.selectType) {
            selectDom = this.selectHTML[this.option.selectType + (((this.checked.nodes[l[this.option.id]]) || this.checked.nodes[l[this.option.id]]) ? 'on' : '')] || ''
            if (this.option.checkDisabled(l)) {
                selectDom = this.selectHTML[this.option.selectType + 'disable']
            }
        }
        let h = `<div style="line-height: ${this.option.lineHeight}px;height:${this.option.lineHeight}px" class="xntree-item ${!open ? 'xn-hide-sub' : ''} ${(this.clicked && this.clicked[this.option.id] == l[this.option.id]) ? 'on' : ''}" data-level="${level}" data-id="${l[this.option.id]}">
                    ${span}
                    ${pre}   
                    ${selectDom}
                    <div class="xntree-label">${label}</div>
                    </div>`
        let dom = document.createElement('div');
        dom.innerHTML = h;
        return [h, dom.childNodes[0]];
    }

    search(keyword, func, containChild) {
        let that = this;
        this.seachKeys = null;
        this.searchKeyword = keyword;
        if (keyword.trim()) {
            if (!func) {
                func = (d) => {
                    return d[that.option.label].indexOf(keyword) > -1
                }
            }
            let path = [], result = [];
            let results = this.treeFindPath(this.data, func, path, result, containChild)
            this.seachKeys = [...new Set(results.flat())];
            this.searchKeysJson = {};
            this.seachKeys.forEach(e => {
                this.searchKeysJson[e] = 1;
            })
        }
        this.refreshDom();
    }

    treeFindPath(tree, func, path = [], result = [], containChild, hasP) {
        for (const data of tree) {
            path.push(data[this.option.id])
            let has = func(data);
            (has || (containChild && hasP)) && result.push([...path])
            data.children && this.treeFindPath(data.children, func, path, result, containChild, (has || (containChild && hasP)))
            path.pop()
        }
        return result
    }

    addEvent() {
        let startTime = new Date().getTime();
        let clickFunc = (e) => {


            let $t = $(e.target);
            if ($t.hasClass('xn-slidedown')) {
                e.stopPropagation();
                this.slideEvent($t);
            }
            if ($t.hasClass('xn-checkbox')) {
                e.stopPropagation();
                this.checkEvent($t);
            }
            if ($t.hasClass('xn-radio')) {
                e.stopPropagation();
                this.radioEvent($t);
            }
            if ($t.hasClass('xntree-label') || $t.parents('.xntree-label').get(0)) {
                e.stopPropagation();
                let $item = $t;
                if ($t.parents('.xntree-label').get(0)) {
                    $item = $t.parents('.xntree-label').eq(0)
                }
                this.clickLabelEvent($item, $t, e);
            }
            if (new Date().getTime() - startTime < 300) {
                e.stopPropagation();
                dblclickFunc(e)
            }
            startTime = new Date().getTime();
        }
        let dblclickFunc = (e) => {
            // e.stopPropagation();
            let $t = $(e.target);
            if ($t.hasClass('xntree-label') || $t.parents('.xntree-label').get(0)) {
                let $item = $t;
                if ($t.parents('.xntree-label').get(0)) {
                    $item = $t.parents('.xntree-label').eq(0)
                }
                let p = $item.parents(".xntree-item").get(0)
                let id = p.getAttribute('data-id')
                let node = this.getNodeById(id)
                if (this.option.on && this.option.on.dblclickNode) {
                    this.option.on.dblclickNode($t, node, id, e)
                }
            }
        }
        this.clickFunc = clickFunc;
        this.container.addEventListener('click', clickFunc)

        this.mouseoverFunc = e => {
            let $t = $(e.target);
            if ($t.hasClass('xntree-item') || $t.parents('.xntree-item').get(0)) {
                let $item = $t;
                if ($t.parents('.xntree-item').get(0)) {
                    $item = $t.parents('.xntree-item').eq(0)
                }
                let id = $item.get(0).getAttribute('data-id')
                let node = this.getNodeById(id)
                if (this.option.on.hoverNode) {
                    this.option.on.hoverNode(node, $t, e)
                }
            }
        }
        this.container.addEventListener('mouseover', this.mouseoverFunc)

        let down = false;
        let move = false;
        let el = {};
        let mousedownFunc = e => {
            let $t = $(e.target);
            if ($t.parents('.xntree-item').get(0)) {
                down = true;
                el.$dom = $t.parents('.xntree-item').eq(0)
                el.id = el.$dom.attr("data-id")
                el.startTime = new Date().getTime();
            }
        }
        this.mousedownFunc = mousedownFunc;
        this.container.addEventListener("mousedown", mousedownFunc)

        let mousemoveFunc = e => {
            if (!this.option.canMove) {
                return;
            }
            if (down && new Date().getTime() - el.startTime > 300) {
                let $t = $(e.target);
                this.container.classList.add("xn-moving")
                $(this.container).find('.xn-onmoving').removeClass('xn-onmoving')
                if ($t.parents('.xntree-item').get(0)) {
                    let $onDom = $t.parents('.xntree-item').eq(0);
                    el.$onDom = $onDom;
                    el.onId = $onDom.attr("data-id")
                    let [dir, x, y,nextLevel] = this.getMovePos($onDom, e)
                    el.dir = dir;
                    el.y = y;
                    el.x = x;
                    el.nextLevel=nextLevel;
                    if (el.dir == 'on') {
                        el.$onDom.addClass('xn-onmoving')
                        this.movedom.style.display = 'none'
                    } else {
                        this.movedom.style.top = el.y + 'px'
                        this.movedom.style.left = el.x + 'px'
                        this.movedom.style.display = 'block'
                        this.movedom.style.width = 'calc(100% - '+el.x+'px)'
                    }
                }
                move = true;
            }
        }
        this.mousemoveFunc = mousemoveFunc;
        document.addEventListener("mousemove", mousemoveFunc)

        let mouseupFunc = e => {
            if (down && move) {
                this.moveItem(el);
            }
            down = false;
            move = false;
            this.container.classList.remove("xn-moving")
            this.movedom.style.display = 'none'
        }
        this.mouseupFunc = mouseupFunc;
        document.addEventListener("mouseup", mouseupFunc)

        let scrollFunc = e => {
            let y = (this.container.scrollTop);
            this.topIndex = Math.floor(y / this.option.lineHeight);
            this.bottomIndex = this.topIndex + this.totalNum + 4;
            this.refreshDom(true);
            this.container.querySelector(".xntree-cont").style.transform = 'translateY(' + (this.topIndex * this.option.lineHeight) + 'px)'
        }
        this.scrollFunc = scrollFunc;
        this.container.addEventListener('scroll', scrollFunc)
    }

    refreshDom(justScroll, needLocate) {
        this.index = 0;
        this.openNumber = 0;
        this.currentNumber = 0;
        this.calcCurrent=true;
        let dom = this._rendHTML(this.data, 0, justScroll);
        this.container.querySelector(".xntree-cont").innerHTML = dom;
        if (!justScroll) {
            this.scrollDom.style.height = this.openNumber * this.option.lineHeight + 'px'
            if (needLocate) {
                this.container.scrollTo(0, this.currentNumber * this.option.lineHeight)
            }
        }
        this.setScrollWidth();
    }

    moveItem(el) {
        // if(el.isNext){
        //     el.onId=
        // }
        let nextLevel=el.nextLevel
        while(el.nextLevel){
            el.onId=this.flatList[el.onId][this.option.pId];
            el.nextLevel--;
        }
        if (el.id == el.onId) {
            return;
        }
        if (this.option.disableMoveNode == true) {
            return;
        }

        if (typeof this.option.disableMoveNode == 'function') {
            let dontMove = this.option.disableMoveNode(this.getNodeById(el.id), this.getNodeById(el.onId), el.dir)
            if (dontMove) {
                return;
            }
        }
        let curP = this.flatList[this.flatList[el.id][this.option.pId]];
        if (!curP) {
            curP = {
                children: this.data
            }
        }
        for (let i = 0; i < curP.children.length; i++) {
            if (curP.children[i][this.option.id] == el.id) {
                curP.children.splice(i, 1);
            }
        }
        let hasChild = true;
        if (!this.flatList[el.onId].children) {
            this.flatList[el.onId].children = [];
            hasChild = false;
        }
        if (el.dir == 'on' || (hasChild && el.dir == 'down' && this.flatList[el.onId].children[0] && this.flatList[el.onId].children[0].$show && !nextLevel)) {//1.在节点上，2.当节点为展开状态，鼠标在节点下方，统一做在节点上的操作
            this.flatList[el.id][this.option.pId] = el.onId;
            this.flatList[el.onId].children.unshift(this.flatList[el.id])
            this.flatList[el.id].$show = this.flatList[el.onId].children[1] && this.flatList[el.onId].children[1].$show;
            this.refreshDom()
            if (this.option.on.moveChange) {
                this.option.on.moveChange(this.flatList[el.id], this.data)
            }
            return;
        }
        let pNode = this.flatList[this.flatList[el.onId][this.option.pId]];
        if ((!pNode) || (this.flatList[el.onId][this.option.id]==this.flatList[el.onId][this.option.pId])) {//有的时候跟节点的id和pid是同一个值
            pNode = {
                children: this.data
            }
        }
        let index;
        for (let i = 0; i < pNode.children.length; i++) {
            if (pNode.children[i][this.option.id] == el.onId) {
                index = i;
            }
        }
        this.flatList[el.id][this.option.pId] = this.flatList[el.onId][this.option.pId];
        if (el.dir == 'up') {
            pNode.children.splice(index, 0, this.flatList[el.id]);
        }
        if (el.dir == 'down') {
            pNode.children.splice(index + 1, 0, this.flatList[el.id]);
        }
        this.refreshDom()
        if (this.option.on.moveChange) {
            this.option.on.moveChange(this.flatList[el.id], this.data)
        }
    }

    renderOneTree(treeData, level, open) {
        let dom = this._rendHTML(treeData, level, open)
        let dom1 = document.createElement('div');
        dom1.innerHTML = dom;
        return dom1.childNodes
    }

    _getItemById(id) {
        return this.container.querySelector('[data-id="' + id + '"]')
    }

    getMovePos($dom, e) {
        let isNext=false;
        let nextLevel=null;
        let dir = ''
        let pos = $dom.get(0).getBoundingClientRect();
        let pPos=this.container.getBoundingClientRect()
        let top = pos.top-pPos.top, top1 = pos.top + pos.height*2 / 5, top2 = pos.top + pos.height * 3 / 5,
            top4 = pos.top + pos.height;
        let etop = e.clientY;
        let y, x;
        let curLevel=$dom.get(0).getAttribute('data-level');
        let siblingLevel=$dom.get(0).nextSibling?$dom.get(0).nextSibling.getAttribute('data-level'):null;
        let isindent=e.target.classList.contains('xn-indent');


        x = pos.left-pPos.left + ($dom.children(".xn-indent").el.length) * 15+15;
        if (etop <= top1) {
            dir = 'up'
            y = top  + this.container.scrollTop;
        }
        if (etop > top1 && etop <= top2) {
            dir = 'on'
        }
        if (etop > top2) {
            dir = 'down'
            y = top+pos.height  + this.container.scrollTop;
            if(isindent && curLevel!=siblingLevel){
                nextLevel=($dom.children('.xn-indent').el).length-($dom.children('.xn-indent').el).indexOf(e.target);
                if(curLevel-nextLevel<siblingLevel){
                    nextLevel=curLevel-siblingLevel;
                }
                x=x-nextLevel*15-15;
            }
        }
        return [dir, x, y,nextLevel];
    }

    setNodesShow(node) {
        if (!node) {
            return;
        }
        let pId = node[this.option.pId];
        let pNode = this.flatList[pId];
        if (!node.$show) {
            node.$show = true;
            if (pNode) {
                for (let i = 0; i < pNode.children.length; i++) {
                    pNode.children[i].$show = true;
                }
            }
        }
        this.setNodesShow(pNode)
    }

    setSelectKey(key, triggerClick, needLocate) {
        this.clicked = this.getNodeById(key);
        this.setNodesShow(this.clicked);
        this.refreshDom(false, needLocate)
        if (triggerClick) {
            this.trigger('clickNode', this.container.querySelector('.xntree-item[data-id="' + key + '"]'), this.clicked, key)
        }
    }

    clickLabelEvent($item, $t, e) {
        let p = $item.parents(".xntree-item").get(0)
        let plevel = parseInt(p.getAttribute('data-level'))
        let id = p.getAttribute('data-id')
        let node = this.getNodeById(id)
        let setClick = true;
        if (this.option.on && this.option.on.clickNode) {
            setClick = this.option.on.clickNode($t, node, id, e)
        }
        if (setClick) {
            this.clicked = node
            // $(this.container).find(".xntree-item.on").removeClass('on')
            // $(p).addClass('on')
        }
        this.refreshDom()

    }

    radioEvent($t) {
        let p = $t.parents(".xntree-item").get(0)
        let id = p.getAttribute('data-id')
        let node = this.getNodeById(id)
        this.checked.keys = [id];
        this.checked.nodes = {};
        this.checked.nodes[id] = this.getNodeById(id)
        this.refreshDom();
        this.trigger('checkChange', node, true, this.checked)
    }

    checkEvent($t) {
        let p = $t.parents(".xntree-item").get(0)
        let id = p.getAttribute('data-id')
        let node = this.getNodeById(id)
        if (this.option.checkDisabled(node)) {
            return;
        }
        let checked = this.checked.nodes[id];
        let sticky = this.option.checkSticky.on;
        if (checked) {
            sticky = this.option.checkSticky.off
        }
        let paths = []
        if (sticky.indexOf('p') > -1) {
            let func = (d) => {
                return d[this.option.id] == id;
            }
            let path = [], result = [];
            let results = this.treeFindPath(this.data, func, path, result, sticky.indexOf('c') > -1)
            paths = [...new Set(results.flat())];
        } else if (sticky.indexOf('c') > -1) {
            this._literalFlatTree({}, [node], {}, paths, 0, true)
        } else {
            paths = [id]
        }
        if (checked) {
            let indexs = this.delArrayFromArray(this.checked.keys, paths);
            for (let i = indexs.length - 1; i >= 0; i--) {
                delete this.checked.nodes[indexs[i]]
            }
        } else {
            for (let i = 0; i < paths.length; i++) {
                this.checked.keys.push(paths[i])
                let node = this.getNodeById(paths[i])
                this.checked.nodes[paths[i]] = node;
            }
        }
        this.refreshDom();
        this.trigger('checkChange', node, !checked, this.checked)
    }

    delArrayFromArray(fromArray, delArray) {
        let indexs = [];
        for (let j = 0; j < delArray.length; j++) {
            let v = delArray[j]
            for (let i = fromArray.length - 1; i >= 0; i--) {
                if (fromArray[i] == v) {
                    fromArray.splice(i, 1)
                    indexs.push(v)
                }
            }
        }
        return indexs;
    }

    setCheckedKeys(keys) {
        this.checked.nodes = {};
        for (let i = keys.length - 1; i >= 0; i--) {
            let id = keys[i]
            let node = this.getNodeById(id)
            if (!node) {//用于处理设置的key值不存在的情况
                keys.splice(i, 1)
                continue;
            }
            this.checked.nodes[id] = (node)
        }
        this.checked.keys = keys;
        this.trigger('checkChange', false, false, this.checked, true)
        this.refreshDom();
    }

    trigger(type, data) {
        var args = [].slice.call(arguments);
        args.splice(0, 1)
        if (this.option.on[type]) {
            this.option.on[type](...args)
        }
    }

    setCheckedNodes(nodes) {
        let keys = nodes.map(e => {
            return e[this.option.id]
        })
        this.setCheckedKeys(keys)
    }

    getChecked() {
        return this.checked;
    }

    checkAll(justResult) {//justResult,仅选择当前搜索结果
        let list = $.extend(true, [], this.flatListKeys);
        list = list.filter(e => {
            return !this.option.checkDisabled(this.getNodeById(e))
        })
        if (justResult && this.seachKeys) {
            list = list.filter((e) => {
                return (!this.seachKeys || this.searchKeysJson[e])
            })
        }
        this.setCheckedKeys(list)

    }

    clearAll() {
        this.setCheckedKeys([], true)
    }

    editNode(node) {
        let oldNode = this.getNodeById(node[this.option.id]);
        $.extend(true, oldNode, node);
        this.refreshDom();
        // let [h, icon, dom] = this._rendOneNode(newNode, false, oldNode.$level, true);
        // let oldDom = this.container.querySelector('[data-id="' + oldNode[this.option.id] + '"]')
        // oldDom.innerHTML = dom.innerHTML;
    }

    addNodes(id,nodes,open){
        for(let i=nodes.length-1;i>=0;i--){
            this._addOneNode(id,nodes[i],open)
        }
        this.refreshDom();
    }

    _addOneNode(id,node,open){
        let pNode = this.getNodeById(id);
        if (!pNode) {
            node.$level = 0;
            node.$show = true;
            this.data.unshift(node);
            this.flatList[node[this.option.id]] = node;
            this.flatListKeys.push(node[this.option.id]);
            this.refreshDom();
            return;
        }
        if (!pNode.children) {
            pNode.children = []
        }
        let $level = pNode.$level + 1;
        node.$level = $level;
        node[this.option.pId || '$pId'] = id;
        if ((pNode.children[0] && pNode.children[0].$show)||open) {
            node.$show = true;
        }
        pNode.children.unshift(node);
        this.flatList[node[this.option.id]] = node;
        this.flatListKeys.push(node[this.option.id]);
    }
    addNode(id, node) {//新增节点
        this._addOneNode(id,node);
        this.refreshDom();
        // let [h, icon, dom] = this._rendOneNode(node, false, $level, true);
        // this.container.querySelector('[data-id="' + id + '"]').after(dom)
    }

    insertAfter(insert_element, target_element) {
        var parent = insert_element.parentNode;
        //最后一个子节点 lastElementChild兼容其他浏览器 lastChild  兼容ie678;
        var last_element = parent.lastElementChild || parent.lastChild;
        //兄弟节点同样也是有兼容性
        var target_sibling = target_element.nextElementSibling || target_element.nextSibling;
        if (last_element == target_element) {//先判断目标节点是不是父级的最后一个节点，如果是的话，直接给父级加子节点就好
            parent.appendChild(insert_element);
        } else {//不是最好后一个节点  那么插入到目标元素的下一个兄弟节点之前（就相当于目标元素的insertafter）
            parent.insertBefore(insert_element, target_sibling);
        }
    }

    deleteNode(id) {//删除节点
        let node = this.getNodeById(id);
        let pNode = this.getNodeById(node[this.option.pId]);
        let key = null;
        if (!pNode) {
            pNode = {children: this.data}
        }
        for (let i = 0; i < pNode.children.length; i++) {
            if (pNode.children[i][this.option.id] == id) {
                key = i;
                break;
            }
        }
        pNode.children.splice(key, 1);
        let delKeys = [];
        this._literalFlatTree({}, [node], {}, delKeys, 0, true)
        for (let i = 0; i < delKeys.length; i++) {
            let k = delKeys[i];
            this.flatListKeys.splice(this.flatListKeys.indexOf(k), 1)
            delete this.flatList[k]
            // $(this.container).find("[data-id='" + k + "']").remove();
        }
        this.refreshDom();
    }

    _deleteDomFromId(id) {
        let node = this.getNodeById(id);
        let delKeys = [];
        this._literalFlatTree({}, [node], {}, delKeys, 0, true)
        for (let i = 0; i < delKeys.length; i++) {
            let k = delKeys[i];
            $(this.container).find("[data-id='" + k + "']").remove();
        }
    }

    getFlatData() {
        let list = [];
        this._literalFlatTree({}, this.data, this.flatList, this.flatListKeys, 0, false, list)
        if (!this.option.pId) {
            this.option.pId = '$pId'
        }
    }

    _literalFlatTree(pNode, list, arry, arrykeys, level, dontSetData, list1) {
        for (let i = 0; i < list.length; i++) {
            let l = list[i];
            if (!dontSetData) {
                l.$level = level;
                l.$show = l.$show || this.option.autoOpen(l, level)
                if (!this.option.pId) {
                    l.$pId = pNode[this.option.id];
                }
            }
            list1.push(l)
            arry[l[this.option.id]] = l
            arrykeys.push(l[this.option.id])
            if (l.children && l.children.length > 0) {
                this._literalFlatTree(l, l.children, arry, arrykeys, level + 1, dontSetData, list1)
            }
        }
    }

    getNodeById(id) {
        return this.flatList[id]
    }

    _literalGetNode(list, id) {
        for (let i = 0; i < list.length; i++) {
            let l = list[i];
            if (l[this.option.id] == id) {
                return l
            }
        }
        return false;
    }

    openChildren(node){
        for (let i = 0; i < node.children.length; i++) {
            node.children[i].$show = !node.children[i].$show
        }
        this.refreshDom()
    }

    async slideEvent($t) {

        let p = $t.parents(".xntree-item").get(0)
        let id = p.getAttribute('data-id');
        let node = this.getNodeById(id);
        if(node.children && node.children.length>=0){
            node.$$loaded=true;
        }
        if(node.$$loaded||!this.option.lazyLoad){
            this.openChildren(node)
        }
        else{
            let nodes=await this.option.on.loadData(node);
            node.$$loaded=true;
            this.addNodes(id,nodes,true)
        }
    }


    findChildren(p, plevel) {
        let child = $(p).nextUntil('.xntree-item[data-level="' + plevel + '"]').filter((i, e) => {
            let level = parseInt(e.getAttribute('data-level'))
            return (level > plevel)
        })
        return child;
    }

    resetOption(option) {
        if (JSON.stringify(this.option) == JSON.stringify(option)) {
            return;
        }
        this.option = $.extend(true, {}, this.option, option)
        // this.refreshDom()
    }

    replaceKey(text, keyword) {
        if (!keyword || keyword.trim() == '') {
            return text;
        }
        text = text.replace(new RegExp('(' + keyword + ')', 'ig'), '<span class="xn-searchedkey">$1</span>')
        return text;
    }

    destory() {
        this.container.removeEventListener('click', this.clickFunc);
        this.container.removeEventListener('dblclick', this.dblclickFunc);
        this.container.removeEventListener('mousedown', this.mousedownFunc);
        this.container.removeEventListener('mouseover', this.mouseoverFunc);
        document.removeEventListener('mousemove', this.mousemoveFunc);
        document.removeEventListener('mouseup', this.mouseupFunc);
        this.container.removeEventListener('scroll', this.scrollFunc);
        this.data = null;
        this.flatList = null;
        this.resizeObserver.unobserve(this.container)
    }

    revertListToTree(data) {
        let datajson = {};
        let d = $.extend(true, [], data);
        for (let i = 0; i < d.length; i++) {
            if (!d[i].children) {
                d[i].children = [];
            }
            datajson[d[i][this.option.id]] = d[i];

        }
        let nd = d.filter(item => {
            if (datajson[item[this.option.pId]] && item[this.option.pId] != item[this.option.id]) {
                datajson[item[this.option.pId]].children.push(item)
                return false;
            }
            return true;
        })
        return nd;
    }

    revertTreeToList(treedata) {
        let list = [];
        this._revertTreeToListFunc(treedata, list);
        return list;
    }

    _revertTreeToListFunc(treedata, list) {
        for (let i = 0; i < treedata.length; i++) {
            let item = $.extend(true, {}, treedata[i]);
            delete item.children;
            list.push(item);
            if (treedata[i].children) {
                this._revertTreeToListFunc(treedata[i].children, list);
            }
        }
    }

    getData() {
        return this.data;
    }

    returnFlatData() {
        return this.flatList
    }

};

window.xnTree = xnTree;
/* harmony default export */ __webpack_exports__["default"] = (xnTree);

}();
/******/ })()
;
//# sourceMappingURL=xntree.min.js.map